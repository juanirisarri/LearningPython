
----------------------------------------------------------------------------------------
HELP: GENERAL PYTHON
----------------------------------------------------------------------------------------
Author: JUAN IRISARRI REMÓN
----------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------


# Python es 100% orientado a objetos
# Todas las variables son objectos
# Las clases predefinidas son: 'int', 'float', 'str', ...  







LISTS: 

 # Se definen con [] :: miLista = ["ind0", "Pos2", True, 1]
 # Pueden mezclar diferentes tipos de variables (int, str, ...)
 # La posición '1' van con índice '0'

 # .append() :: Añade elemento al final
 # .extend() :: Añade varios elementos al final (concatena 2 listas)
 # .pop()    :: Elimina elemento al final
 # .insert() :: Inserta elemento en posición indicado. Desplaza los demás elementos
 # .index()  :: Devuelve el índice del elemento indicado
 # .remove() :: Elimina el elemento indicado

 # "elem" in miLista :: devuelve 'True' si "elem" pertenece a 'miLista'. Si no, devuelve 'False'

 # miLista3 = miLista1 + miLista2 :: une las dos listas
 # miLista *3 :: Crea una nueva lista repitiendo miLista 3 veces

 # miLista = list(miTupla)  :: Crea una lista con el contenido de la tupla









TUPLES:

 # Se definen con () :: miTupla = ("Juan", 13, 1, True,13)
 # Se puede prescindir de los paréntesis para definir la tupla (no recomendado)
 # El primer índice es el 0 (Posición 1)

 # Son listas inmutables (No se pueden modificar)  
 # Son más rápidas de computar
 # Pueden utilizarse como claves en un diccionario (las listas no)

 # .count() :: cuenta el número de veces que aparece el elemento indicado
 # .index() :: Devuelve el índice del elemento indicado

 # len(miTupla)   :: devuelve el número de elememtos 

 # elem in miTupla :: Da True si elem pertenece a miTupla. Si no da False

 # miLista = list(miTupla)  :: Crea una lista con el contenido de la tupla
 # miTupla = tuple(miLista) :: Crea una tupla con el contenido de la lista

 # (a,b,c,d,e) = miTupla :: Desempaqueta la tupla en las variables 









DICTIONARIES:

 # Se definen con {} y con clave:valor ::  miDiccionario = { "Alemania":"Berlin", "Francia":"Paris", 1.52:2}
 # Los elementos no están ordenados. No hay índices

 # El valor y la clave puede ser de cualquier tipo (int, float, str, ...)

 # Añadir nuevos elementos (sobreescribe si la clave ya existía) ::  miDiccionario[Clave] = valor

 # Eliminar elementos :: del miDiccionario[Clave]

 # .keys()   :: Devuelve las claves
 # .values() :: Devuelve los valores
 # len(miDiccionario) :: Devuelve el tamaño










IF:

 # mayor que :: >
 # menor que :: <
 # igual que :: ==

 # or  :: or
 # and :: and

 # in :: revisa si una variable pertenece a un array


Ejemplos:

------------------------------------------------
if 0 < edad_usuario < 18 or edad_usuario >100:
    print("No puedes pasar")

    if edad_usuario > 100:
        print("Es imposible que seas tan mayor")

elif edad_usuario < 0:
    print("Edades negativas no suena muy normal")

else:
    print("Puedes pasar")
------------------------------------------------
if 1<2<3<4==4>1:                         # Se pueden concatenar condiciones
    print("Todo funciona bien")
------------------------------------------------
if asignatura in optativas:
    print("Has elegido: " + asignatura)
else:
    print("Esa asignatura no es válida")













FOR:

 # for VARIABLE in ELEMENT:
   		   ELEMENT puede ser tupla, lista, cadena de texto, ...

 # for j in range(5): 		range es un tipo de array muy usado en bucles for 
       				j va desde 0 hasta 4

 # for j in range(5,10):	j va de 5 hasta 9

 # for j in range(5,10,2):	j va de 5 hasta 9 saltando de 2 en 2 (5 -> 7 -> 9)


Ejemplos:

------------------------------------------------
for i in [1,"Hola",True]:
    print(i)
------------------------------------------------
for i in "elIndiceRecorreEsteArray":
    print(i, end=" ")	# Se especifica el tipo de end
------------------------------------------------











CONTINUE: (dentro de un bucle)

 # hace que no se ejecute lo que tiene debajo y se vuelva al bucle for para seguir con la siguiente iteración


Ejemplo:

------------------------------------------------
nombre = "Juan Irisarri"
contador_caracteres = 0;

for letra in nombre:

    if letra == " ":            # Para que los espacios en blanco no se cuenten
        continue

    contador_caracteres = contador_caracteres + 1
------------------------------------------------









WHILE:

 # while CONDITION == true :


Ejemplos:
 
------------------------------------------------
i = 1;
while i<=10:
    print("Ejecución " + str(i))
    i = i + 1
------------------------------------------------
while i == 10 or j == 2 :
    (code)
------------------------------------------------
while i >= 5 and j <= 3 :
    (code)
------------------------------------------------











GENERATORS:
 # Son como funciones pero se usa 'yield' en lugar de 'return'
 # Devuelven un objeto iterable del que se puede extraer los valores de uno en uno usando "next(objetoIterable)"
 # Ver los scripts para ver ejemplos y funcionamiento













EXCEPTIONS:

 # Cuando hay un error en tiempo de ejecución se cae el programa en esa línea y no se ejecuta el código que está a continuación 
 # Para evitar que se deje de ejecutar el código entero se pueden controlar las excepciones 
 # # Con 'raise' se pueden lanzar nuestras propias excepciones 

 # Excepciones que vienen por defecto en Python:
   # ZeroDivisionError :: división por cero
   # TypeError         :: tipo no válido para la función
   # NameError         :: variable no definida

 # Se pueden crear excepciones como por ejemplo 'negativeAge' con clases 


Ejemplos:

------------------------------------------------
 try:
    division = n1/n2
 except ZeroDivisionError:
    print("Error. No se puede dividir entre cero")
 except TypeError:
    print("Error. No se puede dividir. Se debe introducir un número")
 except:
    print("Ha ocurrido un error")       # Cualquier otra excepción que no sea 'ZeroDivisionError' o 'TypeError'
------------------------------------------------
if edad<0:
        raise ValueError("La edad debe ser positiva")       # Puedes poner ValueError o la excepción que consideres.
------------------------------------------------










OBJECT ORIENTED PROGRAMING (OOP):


 class Coche():

	def __init__(self,input_a,input_b):    # Constructor  	

	def arrancar(self,input_a,input_b):    # Método
        	self.enMarcha = input_a  


 # self :: Hace referencia al propio objeto

 # Privatizar :: se pone '__' antes del nombre (atributos/métodos que solo se pueden modificar/llamar desde dentro de la clase)
	Ej:: self.__ruedas = 4  		# Atributo privado (private)
	Ej:: def __checkeo_interno(self):       # Método privado



 # Inheritance::
	
	class Moto(Vehiculos):  # Esta es una subclase (subclass) de Vehiculo (hereda de ella). Vehiculo es la superclass
                        	# Hereda los constructores, atributos y métodos de su superclase
                        	# Puede sobreescribir los constructores, atributos y métodos de su superclase
                        	# Puede definir sus propios constructores, atributos y métodos 


 				# Sobreescritura (override) de constructores, atributos y métodos :: Utilizar el mismo nombre que la clase padre
				# Si una clase hereda de varias, solo hereda el constructor de la primera. Se soluciona sobreescribiendo el constructor (se recomienda usar 'super')
				# super() :: Hace referencia al constructor/atributo/método de la clase padre

					Ej:: super().__init__(a, b)	# Construcor de la clase padre
					Ej:: super().estado()		# Método de la clase padre


 # isinstance() : Comprobar si un objeto pertenece a una clase o no (pertenece a la suya y a las superclases)
	Ej:: print( isinstance(miMoto, Vehiculos) )     # Devuelve True                            


 # Polymorphism :: Cuando un método se define en varias clases y se llama con un objeto, se usa el método definido en la clase de dicho objeto









STRING METHODS:


 #   upper()       :: Convierte a mayus
 #   lower()       :: Convierte a minus
 #   capitalize()  :: Primera a mayus. Resto en minus

 #   count(str)    :: Cuenta cuantas veces aparece una cierta cadena un otra
 #   isdigit()     :: Devuelve 'True' si es digito
 #   isalnum()     :: Devuelve 'True' si es alfanumerico
 #   isalpha()     :: Devuelve 'True' si hay solo letras

 #   split()       :: Separa utilizando los espacios que haya (devuelve una lista)
 #   strip()       :: Borra los espacios sobrantes al ppio y final

 #   find(str)     :: Devuelve el primer índice de cierta cadena dentro de otra
 #   rfind(str)    :: Como find() pero empieza por el final

 #   replace(str_old, str_new)   :: Cambia una cadena por otra



















MODULES, PACKAGES AND LIBRARIES:

 Módulo:   Un solo archivo de Python (.py) que contiene código, como funciones, clases o variables.
 Paquete:  Una carpeta que contiene uno o más módulos y un archivo especial __init__.py, lo que indica que esa carpeta es un paquete Python. (ese archivo está vacío)
 Librería: Conjunto de módulos y paquetes relacionados que se distribuyen juntos para proporcionar ciertas funcionalidades (como NumPy, Requests, etc.).



 Para importar un módulo:
	import Math_module		->   Math_module.sumar(n1,n2)
	import Math_module as MM	->   MM.sumar(n1,n2)
	from Math_module import *       ->   sumar(n1,n2)		[puedo sustituir el * por la función que deseo importar. Con el * se importan todas]

	¡¡OJO!! : MM. se debe poner para crear objetos de una clase. Para usar los métodos de esa clase sobre ese objeto no se pone MM.	
	¡¡OJO!!: Python busca al módulo en el directorio en el que está el script que lo quiere importar. Si no lo encuentra pasa a buscarlo al 'syspath'



 Para importar un paquete:

	from Libraries.Packages.Math_package.Math_module_A import *  			[hay que poner el path desde el directorio del script que lo quiere importar]
	from Libraries.Packages.Math_package import Math_module_A as MMA
	
		- Libraries, Packages, Math_package son carpetas
		- Math_module_A es un módulo (archivo .py)

	
 Paquetes distribuibles:

	- Se pueden importar sin tener que añadir el path:
		from packageName import moduleName as modName 
		from packageName.moduleName import *

	- Requieren instalación 
	- Para instalar un paquete hay que estar en el directorio donde esta el archivo .tar.gz y ejecutar en la consola "pip3 install math_juan-1.0.tar.gz"  [math_juan-1.0.tar.gz es el nombre del archivo]
	- Para desinstalar: "pip3 uninstall distributionName"   [no importa el directorio]
	
	- Para crear uno: hay que crear un archivo setup.py (rellenarlo bien. Sobre todo "packages") y luego ejecutar en la consola (en el directorio donde se encuentra 'setup.py') "python setup.py sdist"
	- Esto crea en ese directorio:
		- un archivo .egg-info
		- una carpeta dist que contiene un archivo .tar.gz (ESTO ES EL PAQUETE. Ahora lo puedes enviar para que lo instalen)
	






















