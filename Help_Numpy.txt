
----------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------
HELP: NUMPY
----------------------------------------------------------------------------------------
Author: JUAN IRISARRI REMÓN
----------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------


 It will help us to think of all data fundamentally as arrays of numbers
 NumPy == Numerical Python
 NumPy arrays are like Python’s lists, but NumPy arrays provide much more efficient storage and data operations as the arrays grow larger in size







----------------------------------------------------------------------------------------
NUMPY INSTALLATION:
----------------------------------------------------------------------------------------
 pip install numpy
 To check the correct installation: print(np.__version__)







----------------------------------------------------------------------------------------
UNDERSTANDING DATA TYPES IN PYTHON
----------------------------------------------------------------------------------------
 This section outlines and contrasts how arrays of data are handled in the Python language itself, and how NumPy improves on this.
 Fixed-type NumPy-style arrays lack the flexibility of the Python Lists, but are much more efficient for storing and manipulating data.
 Numpy arrays must contain ONLY ONE TYPE of elements (si contiene un str todo lo demás lo considerá como str)
 If you attempt to insert a floating-point value to an integer array, the value will be silently truncated


 NumPy Standard Data Types: (para ver todos ir al libro página 41)
	- 'bool_'  	-> Boolean
	- 'int_'	-> Default integer type (normally 'int64' or 'int32')
	- 'float_'	-> Shorthand for 'float64'
	- 'complex_'	-> Shorthand for 'complex128'



 Creating array from list:
	Ex: myArray1 = np.array([1, 3, 5 , 2])
	Ex: myArray2 = np.array(myList) 


 To explicitly set the data type: dtype
 	Ex: myArrayWithType = np.array(myList, dtype='float32')
	Ex: myArrayWithType = np.array(myList, dtype= np.int16)


 Creating array with numpy methods:

	np.zeros( (1,10), dtype=int) 	# Create a length-10 integer array filled with zeros:
	np.eye(3)			# Create a 3x3 identity matrix
	np.ones( (3,5), dtype=float )	# Create a 3x5 floating-point array filled with 1:
	np.full( (3,5) , 3.14 )		# Create a 3x5 array filled with 3.14
	
	np.arange(0, 20, 2) 		# Create an array filled with a linear sequence: Start at 0, end at 20 (not included), step: 2
	np.linspace(0, 1, 5)		# Create an array of five values evenly spaced between 0 and 1		
	
	np.random.random( (3,3) )		# Create a 3x3 array of UNIFORMLY distributed (random values between 0 and 1)
	np.random.normal( 0, 1, (3,3) ) 	# Create a 3x3 array of NORMALLY distributed random values (mean=0 and std=1)
	np.random.randint( 0, 10, (3,3) )	# Create a 3x3 array of random integers in the interval [0, 10)

	np.empty(3)			# Create an uninitialized array of three integers (values will be whatever happens to already exist at that memory location)











----------------------------------------------------------------------------------------
THE BASICS OF NUMPY ARRAYS
----------------------------------------------------------------------------------------


NumPy Array Attributes:

 ndim:     number of dimensions
 shape:    size of each dimension
 size:     total number of elements in the array
 dtype:    the data type of the array
 itemsize: lists the size (in bytes) of each array element
 nbytes:   lists the total size (in bytes) of the array
	
	Ex: print( "x3 shape: ", x3.shape )






Numpy Array Indexing: (con corchetes)
 Ex: print( x1[4] )
 Ex: print( x2[2,-1] )
 Ex: x2[0,2] = 99 

 




Numpy Array slicing: access a slice of an array

 x[start:stop:step]		-> si se omiten:: start=0, stop=-1, step=1 
 x[:5] 	# first five elements
 x[5:] 	# elements after index 5 (including index 5)
 x[4:7] # middle subarray (step=1)
 x[::2] # every other element (step=2 y recorres todo empezando en index=0)
 x[1::2] # every other element (step=2 y recorres todo empezando en index=1)

 If step<0  ->  start and stop are swapped

 x2[:, 0]   ->  every row,  first column  (devuelve un array 1D == vector fila)
 x2[1, :]   ->  second row, every column  (devuelve un array 1D == vector fila) 
 x2[1]      -> # equivalent to x2[1, :]   (devuelve un array 1D == vector fila)


Subarrays as no-copy views:
 array slices are views rather than copies of the array data
 Es decir, si defino x2_sub = x2[:2, :2] y modifico x2_sub, también se modifica x2 !!!




Copies of arrays:
 x2_sub_copy = x2[:2, :2].copy()  # si lo modifico no modifico x2





Reshaping of Arrays:
 También genera views pero no copias !!
 x.reshape( (3, 3) )    # Transforma x en un matriz 3x3
 x[np.newaxis, :]       # Crea un vector fila o columna pero 2D






Array Concatenation: combine multiple arrays into one

 misma dimension -> concatenate()
 dist  dimension -> vstack, hstack

 np.concatenate([x, y])
  EX: M1 = np.concatenate([ grid1, grid2 ], axis=0 )  #(si no se pone axis: axis=0)  # axis = 0 -> añade filas (mantiene el num de colum)
  EX: M2 = np.concatenate([ grid1, grid2 ], axis=1 )     	           		# axis = 1 -> añade colum (mantiene el num de filas)

  EX: V1 = np.vstack([x,grid1])     # Vertical stack (x arriba)   (x mismo num de colum que grid1)
  EX: H1 = np.hstack([y,grid2])     # Horizontal stack (y izda)   (y mismo num de filas que grid2)





Array Splitting: split a single array into multiple

 np.split(x, [sp1, sp2])       spi == index of the split point i 
 np.hsplit( grid, [sp1 sp2] )
 np.vsplit( grid, [sp1 sp2] ) 
  
  EX: x1,x2,x3    = np.split(x,[3,5])        # x1 goes from index=0 to index=3 (not included) 
  EX: left,right  = np.hsplit( grid, [2] ) 
  EX: upper,lower = np.vsplit(grid, [2])










----------------------------------------------------------------------------------------
COMPUTATION ON NUMPY ARRAYS: UNIVERSAL FUNCTIONS
----------------------------------------------------------------------------------------

En este capítulo se demuesta que utilizar funciones vectoriales (como 1.0/big_array [se hace la división componente a componente] ) 
es mucho mucho más rápido que utilizar bucles anidados para recorrer los np.arrays [en un ejemplo es 500 veces más rápido]

 EX: operation = vector1/vector2  # componente a componente (como Matlab) 


Operaciones interesantes:

	vector%3       # devuelve el residuo de x1/3
	vector**2      # devuelve el vector al cuadrado (componente a componente)
	vector//2      # devuelve la división entera (redondea hacia abajo)
	abs(vector)    # devuelve el valor absoluto
	1j*vector      # devuelve el vector multiplicado por la unidad imaginaria	



En realidad estas operaciones son versiones comprimidas de las funciones de numpy:
 np.add()
 np.substarct()
 np.negative()
 np.multiply()
 np.divide()
 np.floor_divide()
 np.power()
 np.mod()
 np.absolute == np.abs()



Otras operaciones importantes que no tienen version comprimida son:
 
 np.sin(a)
 np.cos(a)
 np.tan(a)
 np.arcsin(x)
 np.arccos(x)
 np.arctan(x)
 
 np.exp(x)	  # e^x	
 np.power(3,x)    # 3^x
 np.log(x)        # ln(x)
 np.log2(x)
 np.log10(x)




Para especificar el output (en menos líneas):
 
 np.multiply(x, 10, out=y)  [y debe estar inicializado]




Aggregates:
 np.add.reduce(x)   		->	sum of all elements 
 np.multiply.reduce(x)		->	product of all elements
 np.add.accumulate(x)		->	sum of all elements (store all the intermediate results)
 np.multiply.accumulate(x)	->	product of all elements (store all the intermediate results)











----------------------------------------------------------------------------------------
AGGREGATIONS: MIN, MAX AND EVERYTHING IN BETWEEN
----------------------------------------------------------------------------------------

Algunas de estas funciones existen en Python y hacen lo mismo en algunos casos. Sin embargo, aun
cuando hagan lo mismo se recomienda usar la versión de numpy pues es mucho más eficiente.


 np.sum(L)          ||  L.sum()  	 -> suma todos los elementos del array (no siempre hace lo mismo que sum(L))
 np.sum(M, axis=0)  ||  M.sum(axis=0)    -> suma todos los elementos de cada columna
 np.sum(M, axis=1)  ||  M.sum(axis=1)  	 -> suma todos los elementos de cada fila
 
 np.prod(Q)   	    ||  Q.prod()         -> producto de los elementos del array
 np.prod(Q,axis=1)  ||  Q.prod(axis=1) 	 -> producto de los elementos de cada fila del array

 np.max(L) 	    || L.max()
 np.min(L)          || L.min()
 np.max(L,axis=0)   || M.max(axis=0) 	-> máximo de cada columna
 np.min(L,axis=1)   || M.min(axis=1) 	-> mínimo de cada flia
 
 np.argmin(L)  ||  L.argmin() 		-> índice del mínimo
 np.argmax(L)  ||  L.argmax() 		-> índice del máximo


 N.mean()		-> media de N
 np.mean(N,axis=1)	-> media de las filas de N
 np.std(N) 		-> std de N
 N.std(axis=1)		-> std de las filas de N
 N.var()		-> varianza de N (=std^2)
 np.var(N,axis=1)	-> varianza de las filas de N
 np.median(N)		-> mediana de N


 np.any( cond )   -> devuelve 'True' si algún elemento es 'True'
 cond.all()       -> devuelve 'True' si todos los elementos son 'True'


 OJO: Existen versiones de estas funciones para cuando hay un array que puede tener NaN en
 su interior. Lo que hace es ignorar estos NaN.









----------------------------------------------------------------------------------------
COMPUTATION ON ARRAYS: BROADCASTING
----------------------------------------------------------------------------------------
Broadcasting is simply a set of rules for applying binary ufuncs (addition, subtraction, multiplication,
etc.) on arrays of different sizes.


 1) arrays of the same shape: binary operations are performed on an element-by-element basis
 2) arrays of different shape: they are both stretched to match a common shape
 (this extra memory is not actually allocated in the course of the operation, but it can be useful conceptually)
 3) Hay reglas que explican como se aumentan los arrays 
	(En el libro esto está bien explicado y ponen ejemplos (pág 66))













----------------------------------------------------------------------------------------
COMPARISONS, MASKS AND BOOLEAN LOGIC 
----------------------------------------------------------------------------------------

Ex:
 out = (vector <= 3)  	      ||  out = np.less(x,3)   			 # out: [ True  True  False  False  False]
 out = (vector1 == vector2)   ||  out = np.equal(vector1,vector2)        # out: [ False  True  False  True  False]

 == || np.equal
 != || np.not_equal
 <  || np.less
 <= || np.less_equal
 >  || np.greater
 >= || np.greater_equal



 np.count_nonzero(vector)  	-> counts the number of 'True' in vector
 np.sum(vector)  		-> counts the number of 'True' in vector
 np.sum(vector, axis=0)		-> counts the number of 'True' in each column of vector

 np.all(vector, axis=1)		-> 'True' if every element in row 1 is 'True'
 np.any(vector)			-> 'True' if any element is 'True'



 ((...) &  (...))   ->  'True' si se cumplen ambas
 ((...) or (...))   ->  'True' si se cumple alguna
 ((...) ^  (...))   ->  'True' si solo se cumple una
 ~((...) or (...))  ->  'True' si no se cumple alguna  {~ invierte lo que va a continuación}


 EX : print("Positive and greater than 1: ",  np.sum(  (x[1,:] > 0)   &   (np.abs(x[1,:])>1)   )  )


OJO: One common point of confusion is the difference between the keywords 'and' and 'or' on one hand, and the
operators '&' and '|' on the other hand. When would you use one versus the other? 'and' and 'or' is to asking 
Python to treat the object as a single Boolean entity.




 Masks: 
	mask_pos = x[x>0]   # array 1D que guarda los elementos positivos de x por orden













----------------------------------------------------------------------------------------
FANCY INDEXING
----------------------------------------------------------------------------------------

Se puede definir un índice y usarlo para sacar una parte de un array:
	ind = [0, -1]	
	x[ind]


El resultado (x[ind]) conservará la shape de 'ind' y no la original de 'x';
	x = [7 3 8 6 6 2 7 1]		# array 1D
	ind = [ [0, 1],[-2,-1] ]	# index 2D
        x[ind] = [ [7 3], [7 1] ]	# array 2D


Se puede combinar el 'fancy indexing' con el 'slicing':
	x[:2, col_ind]


Se puede combinar el 'fancy indexing' con una 'mask':
	mask = np.array([ 1,0,1,0], dtype=bool)    # 1==True   (conserva los índices con 'True')
	x[row_ind, mask]












----------------------------------------------------------------------------------------
SORTING ARRAYS
----------------------------------------------------------------------------------------

Numpy contains built-in sorting algorithms:

	np.sort(x) || x.sort()  -> Ordena x de menor a mayor
	np.argsort(x)		-> Devuelve los índices de 'x' ordenado de menor a mayor
	
	np.sort(x, axis=0))  	-> Ordena cada columna de menor a mayor
	np.sort(x, axis=1))  	-> Ordena cada fila de menor a mayor
	
	
	np.partition(x,K)	-> Ordena 'x' dejando los K valores más pequeños a la izda del array










----------------------------------------------------------------------------------------
STRUCTURED DATA:NUMPY'S STRUCTURED ARRAYS
----------------------------------------------------------------------------------------

While often our data can be well represented by a homogeneous array of values,
sometimes this is not the case. Structured arrays and record arrays provide efficient
storage for compound, heterogeneous data.

 structured arrays == arrays with compound data types

Son interasantes porque hay una unión entre las diferentes piezas de información que pueda
contener un array 'data', como que Juan tiene 25 años (son informaciónes relacionadas). 

For day-to-day use of structured data, the Pandas package is a much better choice



































